// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use wasmlib::*;
use crate::*;

pub struct AddPPToFractionCall {
	pub func: ScFunc,
	pub params: MutableAddPPToFractionParams,
	pub results: ImmutableAddPPToFractionResults,
}

pub struct AddRecyclerCall {
	pub func: ScFunc,
	pub params: MutableAddRecyclerParams,
}

pub struct AddSorterCall {
	pub func: ScFunc,
	pub params: MutableAddSorterParams,
}

pub struct CreateFractionCall {
	pub func: ScFunc,
	pub params: MutableCreateFractionParams,
	pub results: ImmutableCreateFractionResults,
}

pub struct CreatePPCall {
	pub func: ScFunc,
	pub params: MutableCreatePPParams,
	pub results: ImmutableCreatePPResults,
}

pub struct CreateRecyclateCall {
	pub func: ScFunc,
	pub params: MutableCreateRecyclateParams,
	pub results: ImmutableCreateRecyclateResults,
}

pub struct DeletePPCall {
	pub func: ScFunc,
	pub params: MutableDeletePPParams,
	pub results: ImmutableDeletePPResults,
}

pub struct InitCall {
	pub func: ScInitFunc,
	pub params: MutableInitParams,
}

pub struct PayoutDonationCall {
	pub func: ScFunc,
}

pub struct PayoutProducerCall {
	pub func: ScFunc,
	pub params: MutablePayoutProducerParams,
}

pub struct SetDonationAddressCall {
	pub func: ScFunc,
	pub params: MutableSetDonationAddressParams,
}

pub struct SetOwnerCall {
	pub func: ScFunc,
	pub params: MutableSetOwnerParams,
}

pub struct GetAmountOfRequiredFundsCall {
	pub func: ScView,
	pub params: MutableGetAmountOfRequiredFundsParams,
	pub results: ImmutableGetAmountOfRequiredFundsResults,
}

pub struct GetDonationAddressCall {
	pub func: ScView,
	pub results: ImmutableGetDonationAddressResults,
}

pub struct GetFractionCall {
	pub func: ScView,
	pub params: MutableGetFractionParams,
	pub results: ImmutableGetFractionResults,
}

pub struct GetMaterialsCall {
	pub func: ScView,
	pub params: MutableGetMaterialsParams,
	pub results: ImmutableGetMaterialsResults,
}

pub struct GetOwnerCall {
	pub func: ScView,
	pub results: ImmutableGetOwnerResults,
}

pub struct GetPPCall {
	pub func: ScView,
	pub params: MutableGetPPParams,
	pub results: ImmutableGetPPResults,
}

pub struct GetRecyclateCall {
	pub func: ScView,
	pub params: MutableGetRecyclateParams,
	pub results: ImmutableGetRecyclateResults,
}

pub struct GetTokenPerPackageCall {
	pub func: ScView,
	pub params: MutableGetTokenPerPackageParams,
	pub results: ImmutableGetTokenPerPackageResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn add_pp_to_fraction(_ctx: &dyn ScFuncCallContext) -> AddPPToFractionCall {
        let mut f = AddPPToFractionCall {
            func: ScFunc::new(HSC_NAME, HFUNC_ADD_PP_TO_FRACTION),
            params: MutableAddPPToFractionParams { proxy: Proxy::nil() },
            results: ImmutableAddPPToFractionResults { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        ScFunc::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn add_recycler(_ctx: &dyn ScFuncCallContext) -> AddRecyclerCall {
        let mut f = AddRecyclerCall {
            func: ScFunc::new(HSC_NAME, HFUNC_ADD_RECYCLER),
            params: MutableAddRecyclerParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn add_sorter(_ctx: &dyn ScFuncCallContext) -> AddSorterCall {
        let mut f = AddSorterCall {
            func: ScFunc::new(HSC_NAME, HFUNC_ADD_SORTER),
            params: MutableAddSorterParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn create_fraction(_ctx: &dyn ScFuncCallContext) -> CreateFractionCall {
        let mut f = CreateFractionCall {
            func: ScFunc::new(HSC_NAME, HFUNC_CREATE_FRACTION),
            params: MutableCreateFractionParams { proxy: Proxy::nil() },
            results: ImmutableCreateFractionResults { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        ScFunc::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn create_pp(_ctx: &dyn ScFuncCallContext) -> CreatePPCall {
        let mut f = CreatePPCall {
            func: ScFunc::new(HSC_NAME, HFUNC_CREATE_PP),
            params: MutableCreatePPParams { proxy: Proxy::nil() },
            results: ImmutableCreatePPResults { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        ScFunc::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn create_recyclate(_ctx: &dyn ScFuncCallContext) -> CreateRecyclateCall {
        let mut f = CreateRecyclateCall {
            func: ScFunc::new(HSC_NAME, HFUNC_CREATE_RECYCLATE),
            params: MutableCreateRecyclateParams { proxy: Proxy::nil() },
            results: ImmutableCreateRecyclateResults { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        ScFunc::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn delete_pp(_ctx: &dyn ScFuncCallContext) -> DeletePPCall {
        let mut f = DeletePPCall {
            func: ScFunc::new(HSC_NAME, HFUNC_DELETE_PP),
            params: MutableDeletePPParams { proxy: Proxy::nil() },
            results: ImmutableDeletePPResults { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        ScFunc::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn init(_ctx: &dyn ScFuncCallContext) -> InitCall {
        let mut f = InitCall {
            func: ScInitFunc::new(HSC_NAME, HFUNC_INIT),
            params: MutableInitParams { proxy: Proxy::nil() },
        };
        ScInitFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn payout_donation(_ctx: &dyn ScFuncCallContext) -> PayoutDonationCall {
        PayoutDonationCall {
            func: ScFunc::new(HSC_NAME, HFUNC_PAYOUT_DONATION),
        }
    }

    pub fn payout_producer(_ctx: &dyn ScFuncCallContext) -> PayoutProducerCall {
        let mut f = PayoutProducerCall {
            func: ScFunc::new(HSC_NAME, HFUNC_PAYOUT_PRODUCER),
            params: MutablePayoutProducerParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn set_donation_address(_ctx: &dyn ScFuncCallContext) -> SetDonationAddressCall {
        let mut f = SetDonationAddressCall {
            func: ScFunc::new(HSC_NAME, HFUNC_SET_DONATION_ADDRESS),
            params: MutableSetDonationAddressParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn set_owner(_ctx: &dyn ScFuncCallContext) -> SetOwnerCall {
        let mut f = SetOwnerCall {
            func: ScFunc::new(HSC_NAME, HFUNC_SET_OWNER),
            params: MutableSetOwnerParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn get_amount_of_required_funds(_ctx: &dyn ScViewCallContext) -> GetAmountOfRequiredFundsCall {
        let mut f = GetAmountOfRequiredFundsCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_AMOUNT_OF_REQUIRED_FUNDS),
            params: MutableGetAmountOfRequiredFundsParams { proxy: Proxy::nil() },
            results: ImmutableGetAmountOfRequiredFundsResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_donation_address(_ctx: &dyn ScViewCallContext) -> GetDonationAddressCall {
        let mut f = GetDonationAddressCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_DONATION_ADDRESS),
            results: ImmutableGetDonationAddressResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_fraction(_ctx: &dyn ScViewCallContext) -> GetFractionCall {
        let mut f = GetFractionCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_FRACTION),
            params: MutableGetFractionParams { proxy: Proxy::nil() },
            results: ImmutableGetFractionResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_materials(_ctx: &dyn ScViewCallContext) -> GetMaterialsCall {
        let mut f = GetMaterialsCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_MATERIALS),
            params: MutableGetMaterialsParams { proxy: Proxy::nil() },
            results: ImmutableGetMaterialsResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_owner(_ctx: &dyn ScViewCallContext) -> GetOwnerCall {
        let mut f = GetOwnerCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_OWNER),
            results: ImmutableGetOwnerResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_pp(_ctx: &dyn ScViewCallContext) -> GetPPCall {
        let mut f = GetPPCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_PP),
            params: MutableGetPPParams { proxy: Proxy::nil() },
            results: ImmutableGetPPResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_recyclate(_ctx: &dyn ScViewCallContext) -> GetRecyclateCall {
        let mut f = GetRecyclateCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_RECYCLATE),
            params: MutableGetRecyclateParams { proxy: Proxy::nil() },
            results: ImmutableGetRecyclateResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_token_per_package(_ctx: &dyn ScViewCallContext) -> GetTokenPerPackageCall {
        let mut f = GetTokenPerPackageCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_TOKEN_PER_PACKAGE),
            params: MutableGetTokenPerPackageParams { proxy: Proxy::nil() },
            results: ImmutableGetTokenPerPackageResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }
}
