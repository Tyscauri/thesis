// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package circularity_artifact

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

type AddPPToFractionCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableAddPPToFractionParams
	Results ImmutableAddPPToFractionResults
}

type AddRecyclerCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableAddRecyclerParams
}

type AddSorterCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableAddSorterParams
}

type CreateFractionCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableCreateFractionParams
	Results ImmutableCreateFractionResults
}

type CreatePPCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableCreatePPParams
	Results ImmutableCreatePPResults
}

type CreateRecyclateCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableCreateRecyclateParams
	Results ImmutableCreateRecyclateResults
}

type DeletePPCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableDeletePPParams
	Results ImmutableDeletePPResults
}

type InitCall struct {
	Func    *wasmlib.ScInitFunc
	Params  MutableInitParams
}

type PayoutDonationCall struct {
	Func    *wasmlib.ScFunc
}

type PayoutProducerCall struct {
	Func    *wasmlib.ScFunc
	Params  MutablePayoutProducerParams
}

type SetDonationAddressCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetDonationAddressParams
}

type SetOwnerCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetOwnerParams
}

type GetAmountOfRequiredFundsCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetAmountOfRequiredFundsParams
	Results ImmutableGetAmountOfRequiredFundsResults
}

type GetDonationAddressCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetDonationAddressResults
}

type GetFractionCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetFractionParams
	Results ImmutableGetFractionResults
}

type GetMaterialsCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetMaterialsParams
	Results ImmutableGetMaterialsResults
}

type GetOwnerCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetOwnerResults
}

type GetPPCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetPPParams
	Results ImmutableGetPPResults
}

type GetRecyclateCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetRecyclateParams
	Results ImmutableGetRecyclateResults
}

type GetTokenPerPackageCall struct {
	Func    *wasmlib.ScView
	Params  MutableGetTokenPerPackageParams
	Results ImmutableGetTokenPerPackageResults
}

type Funcs struct{}

var ScFuncs Funcs

func (sc Funcs) AddPPToFraction(ctx wasmlib.ScFuncCallContext) *AddPPToFractionCall {
	f := &AddPPToFractionCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAddPPToFraction)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.proxy)
	return f
}

func (sc Funcs) AddRecycler(ctx wasmlib.ScFuncCallContext) *AddRecyclerCall {
	f := &AddRecyclerCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAddRecycler)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) AddSorter(ctx wasmlib.ScFuncCallContext) *AddSorterCall {
	f := &AddSorterCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncAddSorter)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) CreateFraction(ctx wasmlib.ScFuncCallContext) *CreateFractionCall {
	f := &CreateFractionCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncCreateFraction)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.proxy)
	return f
}

func (sc Funcs) CreatePP(ctx wasmlib.ScFuncCallContext) *CreatePPCall {
	f := &CreatePPCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncCreatePP)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.proxy)
	return f
}

func (sc Funcs) CreateRecyclate(ctx wasmlib.ScFuncCallContext) *CreateRecyclateCall {
	f := &CreateRecyclateCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncCreateRecyclate)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.proxy)
	return f
}

func (sc Funcs) DeletePP(ctx wasmlib.ScFuncCallContext) *DeletePPCall {
	f := &DeletePPCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncDeletePP)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	wasmlib.NewCallResultsProxy(&f.Func.ScView, &f.Results.proxy)
	return f
}

func (sc Funcs) Init(ctx wasmlib.ScFuncCallContext) *InitCall {
	f := &InitCall{Func: wasmlib.NewScInitFunc(ctx, HScName, HFuncInit)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) PayoutDonation(ctx wasmlib.ScFuncCallContext) *PayoutDonationCall {
	return &PayoutDonationCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncPayoutDonation)}
}

func (sc Funcs) PayoutProducer(ctx wasmlib.ScFuncCallContext) *PayoutProducerCall {
	f := &PayoutProducerCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncPayoutProducer)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetDonationAddress(ctx wasmlib.ScFuncCallContext) *SetDonationAddressCall {
	f := &SetDonationAddressCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetDonationAddress)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetOwner(ctx wasmlib.ScFuncCallContext) *SetOwnerCall {
	f := &SetOwnerCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetOwner)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) GetAmountOfRequiredFunds(ctx wasmlib.ScViewCallContext) *GetAmountOfRequiredFundsCall {
	f := &GetAmountOfRequiredFundsCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetAmountOfRequiredFunds)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetDonationAddress(ctx wasmlib.ScViewCallContext) *GetDonationAddressCall {
	f := &GetDonationAddressCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetDonationAddress)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetFraction(ctx wasmlib.ScViewCallContext) *GetFractionCall {
	f := &GetFractionCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetFraction)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetMaterials(ctx wasmlib.ScViewCallContext) *GetMaterialsCall {
	f := &GetMaterialsCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetMaterials)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetOwner(ctx wasmlib.ScViewCallContext) *GetOwnerCall {
	f := &GetOwnerCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetOwner)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetPP(ctx wasmlib.ScViewCallContext) *GetPPCall {
	f := &GetPPCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetPP)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetRecyclate(ctx wasmlib.ScViewCallContext) *GetRecyclateCall {
	f := &GetRecyclateCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetRecyclate)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetTokenPerPackage(ctx wasmlib.ScViewCallContext) *GetTokenPerPackageCall {
	f := &GetTokenPerPackageCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetTokenPerPackage)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}
