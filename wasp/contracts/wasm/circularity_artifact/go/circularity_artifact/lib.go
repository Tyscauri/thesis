// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package circularity_artifact

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

var exportMap = wasmlib.ScExportMap{
	Names: []string{
    	FuncAddPPToFraction,
    	FuncAddRecycler,
    	FuncAddSorter,
    	FuncCreateFraction,
    	FuncCreatePP,
    	FuncCreateRecyclate,
    	FuncDeletePP,
    	FuncInit,
    	FuncPayoutDonation,
    	FuncPayoutProducer,
    	FuncSetDonationAddress,
    	FuncSetOwner,
    	ViewGetAmountOfRequiredFunds,
    	ViewGetDonationAddress,
    	ViewGetFraction,
    	ViewGetMaterials,
    	ViewGetOwner,
    	ViewGetPP,
    	ViewGetRecyclate,
    	ViewGetTokenPerPackage,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
    	funcAddPPToFractionThunk,
    	funcAddRecyclerThunk,
    	funcAddSorterThunk,
    	funcCreateFractionThunk,
    	funcCreatePPThunk,
    	funcCreateRecyclateThunk,
    	funcDeletePPThunk,
    	funcInitThunk,
    	funcPayoutDonationThunk,
    	funcPayoutProducerThunk,
    	funcSetDonationAddressThunk,
    	funcSetOwnerThunk,
	},
	Views: []wasmlib.ScViewContextFunction{
    	viewGetAmountOfRequiredFundsThunk,
    	viewGetDonationAddressThunk,
    	viewGetFractionThunk,
    	viewGetMaterialsThunk,
    	viewGetOwnerThunk,
    	viewGetPPThunk,
    	viewGetRecyclateThunk,
    	viewGetTokenPerPackageThunk,
	},
}

func OnLoad(index int32) {
	if index >= 0 {
		wasmlib.ScExportsCall(index, &exportMap)
		return
	}

	wasmlib.ScExportsExport(&exportMap)
}

type AddPPToFractionContext struct {
	Params  ImmutableAddPPToFractionParams
	Results MutableAddPPToFractionResults
	State   Mutablecircularity_artifactState
}

func funcAddPPToFractionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcAddPPToFraction")
	results := wasmlib.NewScDict()
	f := &AddPPToFractionContext{
		Params: ImmutableAddPPToFractionParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableAddPPToFractionResults{
			proxy: results.AsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.FracID().Exists(), "missing mandatory fracID")
	ctx.Require(f.Params.PpID().Exists(), "missing mandatory ppID")
	funcAddPPToFraction(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.funcAddPPToFraction ok")
}

type AddRecyclerContext struct {
	Params  ImmutableAddRecyclerParams
	State   Mutablecircularity_artifactState
}

func funcAddRecyclerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcAddRecycler")
	f := &AddRecyclerContext{
		Params: ImmutableAddRecyclerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.RecyclerID().Exists(), "missing mandatory recyclerID")
	funcAddRecycler(ctx, f)
	ctx.Log("circularity_artifact.funcAddRecycler ok")
}

type AddSorterContext struct {
	Params  ImmutableAddSorterParams
	State   Mutablecircularity_artifactState
}

func funcAddSorterThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcAddSorter")
	f := &AddSorterContext{
		Params: ImmutableAddSorterParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.SorterID().Exists(), "missing mandatory sorterID")
	funcAddSorter(ctx, f)
	ctx.Log("circularity_artifact.funcAddSorter ok")
}

type CreateFractionContext struct {
	Params  ImmutableCreateFractionParams
	Results MutableCreateFractionResults
	State   Mutablecircularity_artifactState
}

func funcCreateFractionThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcCreateFraction")
	results := wasmlib.NewScDict()
	f := &CreateFractionContext{
		Params: ImmutableCreateFractionParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableCreateFractionResults{
			proxy: results.AsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Purpose().Exists(), "missing mandatory purpose")
	funcCreateFraction(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.funcCreateFraction ok")
}

type CreatePPContext struct {
	Params  ImmutableCreatePPParams
	Results MutableCreatePPResults
	State   Mutablecircularity_artifactState
}

func funcCreatePPThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcCreatePP")
	results := wasmlib.NewScDict()
	f := &CreatePPContext{
		Params: ImmutableCreatePPParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableCreatePPResults{
			proxy: results.AsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.ExpiryDate().Exists(), "missing mandatory expiryDate")
	ctx.Require(f.Params.Name().Exists(), "missing mandatory name")
	ctx.Require(f.Params.PackageWeight().Exists(), "missing mandatory packageWeight")
	ctx.Require(f.Params.PackagesNumber().Exists(), "missing mandatory packagesNumber")
	ctx.Require(f.Params.Purpose().Exists(), "missing mandatory purpose")
	funcCreatePP(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.funcCreatePP ok")
}

type CreateRecyclateContext struct {
	Params  ImmutableCreateRecyclateParams
	Results MutableCreateRecyclateResults
	State   Mutablecircularity_artifactState
}

func funcCreateRecyclateThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcCreateRecyclate")
	results := wasmlib.NewScDict()
	f := &CreateRecyclateContext{
		Params: ImmutableCreateRecyclateParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableCreateRecyclateResults{
			proxy: results.AsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.FracID().Exists(), "missing mandatory fracID")
	funcCreateRecyclate(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.funcCreateRecyclate ok")
}

type DeletePPContext struct {
	Params  ImmutableDeletePPParams
	Results MutableDeletePPResults
	State   Mutablecircularity_artifactState
}

func funcDeletePPThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcDeletePP")
	results := wasmlib.NewScDict()
	f := &DeletePPContext{
		Params: ImmutableDeletePPParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableDeletePPResults{
			proxy: results.AsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.PpID().Exists(), "missing mandatory ppID")
	funcDeletePP(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.funcDeletePP ok")
}

type InitContext struct {
	Params  ImmutableInitParams
	State   Mutablecircularity_artifactState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcInit(ctx, f)
	ctx.Log("circularity_artifact.funcInit ok")
}

type PayoutDonationContext struct {
	State   Mutablecircularity_artifactState
}

func funcPayoutDonationThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcPayoutDonation")
	f := &PayoutDonationContext{
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcPayoutDonation(ctx, f)
	ctx.Log("circularity_artifact.funcPayoutDonation ok")
}

type PayoutProducerContext struct {
	Params  ImmutablePayoutProducerParams
	State   Mutablecircularity_artifactState
}

func funcPayoutProducerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcPayoutProducer")
	f := &PayoutProducerContext{
		Params: ImmutablePayoutProducerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.ProdID().Exists(), "missing mandatory prodID")
	funcPayoutProducer(ctx, f)
	ctx.Log("circularity_artifact.funcPayoutProducer ok")
}

type SetDonationAddressContext struct {
	Params  ImmutableSetDonationAddressParams
	State   Mutablecircularity_artifactState
}

func funcSetDonationAddressThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcSetDonationAddress")
	f := &SetDonationAddressContext{
		Params: ImmutableSetDonationAddressParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.DonationAddress().Exists(), "missing mandatory donationAddress")
	funcSetDonationAddress(ctx, f)
	ctx.Log("circularity_artifact.funcSetDonationAddress ok")
}

type SetOwnerContext struct {
	Params  ImmutableSetOwnerParams
	State   Mutablecircularity_artifactState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("circularity_artifact.funcSetOwner")
	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: Mutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("circularity_artifact.funcSetOwner ok")
}

type GetAmountOfRequiredFundsContext struct {
	Params  ImmutableGetAmountOfRequiredFundsParams
	Results MutableGetAmountOfRequiredFundsResults
	State   Immutablecircularity_artifactState
}

func viewGetAmountOfRequiredFundsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity_artifact.viewGetAmountOfRequiredFunds")
	results := wasmlib.NewScDict()
	f := &GetAmountOfRequiredFundsContext{
		Params: ImmutableGetAmountOfRequiredFundsParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetAmountOfRequiredFundsResults{
			proxy: results.AsProxy(),
		},
		State: Immutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.ChargeWeight().Exists(), "missing mandatory chargeWeight")
	viewGetAmountOfRequiredFunds(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.viewGetAmountOfRequiredFunds ok")
}

type GetDonationAddressContext struct {
	Results MutableGetDonationAddressResults
	State   Immutablecircularity_artifactState
}

func viewGetDonationAddressThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity_artifact.viewGetDonationAddress")
	results := wasmlib.NewScDict()
	f := &GetDonationAddressContext{
		Results: MutableGetDonationAddressResults{
			proxy: results.AsProxy(),
		},
		State: Immutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetDonationAddress(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.viewGetDonationAddress ok")
}

type GetFractionContext struct {
	Params  ImmutableGetFractionParams
	Results MutableGetFractionResults
	State   Immutablecircularity_artifactState
}

func viewGetFractionThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity_artifact.viewGetFraction")
	results := wasmlib.NewScDict()
	f := &GetFractionContext{
		Params: ImmutableGetFractionParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetFractionResults{
			proxy: results.AsProxy(),
		},
		State: Immutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.FracID().Exists(), "missing mandatory fracID")
	viewGetFraction(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.viewGetFraction ok")
}

type GetMaterialsContext struct {
	Params  ImmutableGetMaterialsParams
	Results MutableGetMaterialsResults
	State   Immutablecircularity_artifactState
}

func viewGetMaterialsThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity_artifact.viewGetMaterials")
	results := wasmlib.NewScDict()
	f := &GetMaterialsContext{
		Params: ImmutableGetMaterialsParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetMaterialsResults{
			proxy: results.AsProxy(),
		},
		State: Immutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	viewGetMaterials(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.viewGetMaterials ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   Immutablecircularity_artifactState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity_artifact.viewGetOwner")
	results := wasmlib.NewScDict()
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			proxy: results.AsProxy(),
		},
		State: Immutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetOwner(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.viewGetOwner ok")
}

type GetPPContext struct {
	Params  ImmutableGetPPParams
	Results MutableGetPPResults
	State   Immutablecircularity_artifactState
}

func viewGetPPThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity_artifact.viewGetPP")
	results := wasmlib.NewScDict()
	f := &GetPPContext{
		Params: ImmutableGetPPParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetPPResults{
			proxy: results.AsProxy(),
		},
		State: Immutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Id().Exists(), "missing mandatory id")
	viewGetPP(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.viewGetPP ok")
}

type GetRecyclateContext struct {
	Params  ImmutableGetRecyclateParams
	Results MutableGetRecyclateResults
	State   Immutablecircularity_artifactState
}

func viewGetRecyclateThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity_artifact.viewGetRecyclate")
	results := wasmlib.NewScDict()
	f := &GetRecyclateContext{
		Params: ImmutableGetRecyclateParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetRecyclateResults{
			proxy: results.AsProxy(),
		},
		State: Immutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.RecyID().Exists(), "missing mandatory recyID")
	viewGetRecyclate(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.viewGetRecyclate ok")
}

type GetTokenPerPackageContext struct {
	Params  ImmutableGetTokenPerPackageParams
	Results MutableGetTokenPerPackageResults
	State   Immutablecircularity_artifactState
}

func viewGetTokenPerPackageThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("circularity_artifact.viewGetTokenPerPackage")
	results := wasmlib.NewScDict()
	f := &GetTokenPerPackageContext{
		Params: ImmutableGetTokenPerPackageParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		Results: MutableGetTokenPerPackageResults{
			proxy: results.AsProxy(),
		},
		State: Immutablecircularity_artifactState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetTokenPerPackage(ctx, f)
	ctx.Results(results)
	ctx.Log("circularity_artifact.viewGetTokenPerPackage ok")
}
